@page "/filmlist"


@using FilmDb.Model;
@using FilmsServices.Services.Common;
@using FilmsServices.ViewModel;

@inject IService<Film, FilmVM> filmRepository


<PageTitle>Weather forecast</PageTitle>

<h1>Weather forecast</h1>

<p>This component demonstrates fetching data from a service.</p>


@if (films == null)
{
    <p>Loading...</p>
}
else
{
    <p role="status">Current count: @(page + 1)</p>

    <button class="btn btn-primary" @onclick="IncrementPage">Следующая страница</button>


<table class="table">
    <thead>
        <tr>
            <th>Название</th>
            <th>Год</th>
            <th>Описание</th>
            <th>Постер</th>
        </tr>
    </thead>
    <tbody>
        @foreach(var f in films)
        {
            <tr>
                <td>@f.Name</td>
                <td>@f.Year</td>
                <td>@f.Description</td>
                <td><img src="@f.Poster" width="200" /></td>
            </tr>
        }
    </tbody>
</table>
}

@code {
    private List<FilmVM> films;
    private int page = 0;
    private int limit = 100;


    protected override async Task OnInitializedAsync()
    {
        await UpdateFilmsPage();
    }


    private async Task IncrementPage()
    {
        page++;
        await UpdateFilmsPage();
    }


    private async Task UpdateFilmsPage()
    {
        films = await filmRepository.GetAllAsync(limit, page);
    }

}
